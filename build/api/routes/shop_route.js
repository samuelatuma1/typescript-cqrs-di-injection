"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const shop_controller_1 = __importDefault(require("./../../api/controllers/shop_controller"));
const program_1 = require("./../../api/program");
const express_1 = require("express");
const multer_upload_1 = require("./../../api/middlewares/multer_upload");
const shopRoute = (0, express_1.Router)();
const shopController = program_1.iocContainer.resolve(shop_controller_1.default);
shopRoute.post('/category', multer_upload_1.upload.single('img'), (req, res, next) => shopController.createCategory(req, res, next));
shopRoute.post('/add-filters/:categoryId', (req, res, next) => shopController.addFiltersToCategory(req, res, next));
shopRoute.delete("/delete-filters/:categoryId", (req, res, next) => shopController.deleteFilters(req, res, next));
shopRoute.patch("/update-filter/:categoryId", (req, res, next) => shopController.updateFilter(req, res, next));
shopRoute.get("/category/:categoryId", (req, res, next) => shopController.getCategory(req, res, next));
shopRoute.post("/discount", (req, res, next) => shopController.createDiscount(req, res, next));
shopRoute.post("/discount/add", (req, res, next) => shopController.addDiscount(req, res, next));
shopRoute.post("/special-offer", (req, res, next) => shopController.createSpecialOffer(req, res, next));
shopRoute.post("/special-offer/add-discounts/:specialOfferId", (req, res, next) => shopController.addDiscountsToSpecialOffer(req, res, next));
shopRoute.post("/special-offer/add-products/:specialOfferId", (req, res, next) => shopController.addProductsWithDiscountToSpecialOffer(req, res, next));
shopRoute.get("/special-offer/active", (req, res, next) => shopController.getActiveSpecialOffers(req, res, next));
shopRoute.post("/cart", (req, res, next) => shopController.createCart(req, res, next));
shopRoute.post("/billboard", multer_upload_1.upload.fields([{ name: 'mainImg', maxCount: 1 }, { name: 'otherMedia', maxCount: 10 }]), (req, res, next) => shopController.createBillboard(req, res, next));
shopRoute.get("/billboard/active", (req, res, next) => shopController.getActiveBillboards(req, res, next));
shopRoute.put("/billboard/:billboardId", (req, res, next) => shopController.updateBillboard(req, res, next));
shopRoute.delete("/billboard/:billboardId", (req, res, next) => shopController.deleteBillboard(req, res, next));
shopRoute.get("/billboard", (req, res, next) => shopController.searchBillboards(req, res, next));
shopRoute.get("/billboard/:billboardId", (req, res, next) => shopController.getBillboard(req, res, next));
shopRoute.post("/catalogue", multer_upload_1.upload.fields([{ name: 'mainImg', maxCount: 1 }]), (req, res, next) => shopController.createCatalogue(req, res, next));
shopRoute.put("/catalogue/update/:catalogueId", multer_upload_1.upload.fields([{ name: 'mainImg', maxCount: 1 }]), (req, res, next) => shopController.updateCatalogue(req, res, next));
shopRoute.get("/catalogue", (req, res, next) => shopController.getCatalogue(req, res, next));
shopRoute.put("/catalogue/set-isfeatured", (req, res, next) => shopController.featureCatalogues(req, res, next));
shopRoute.put("/catalogue/add-products", (req, res, next) => shopController.addProductsToCatalogue(req, res, next));
shopRoute.put("/catalogue/remove-products", (req, res, next) => shopController.removeProductsFromCatalogue(req, res, next));
shopRoute.post("/brand", multer_upload_1.upload.fields([{ name: 'mainImg', maxCount: 1 }]), (req, res, next) => shopController.createBrand(req, res, next));
shopRoute.post("/brand/add-products/:brandId", (req, res, next) => shopController.addProductsToBrand(req, res, next));
exports.default = shopRoute;
//# sourceMappingURL=shop_route.js.map